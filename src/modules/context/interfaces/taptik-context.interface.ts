/**
 * Core TaptikContext interface for consistent data exchange between export/deploy operations
 * This interface ensures compatibility across different IDE platforms and cloud operations
 */

import { SecurityAction, ConfigSortBy } from '../constants';

export interface TaptikContext {
  metadata: ContextMetadata;
  content: ContextContent;
  security: SecurityInfo;
}

export interface ContextMetadata {
  /** Semantic version of the context format */
  version: string;
  /** ISO 8601 timestamp when context was exported */
  exportedAt: string;
  /** Source IDE identifier (e.g., 'claude-code', 'kiro-ide', 'cursor-ide') */
  sourceIde: string;
  /** Array of compatible target IDE identifiers */
  targetIdes: string[];
  /** Human-readable title for the configuration */
  title?: string;
  /** Detailed description of the configuration */
  description?: string;
  /** Tags for categorization and search */
  tags?: string[];
  /** File size in bytes */
  fileSize?: number;
  /** Generated by taptik-cli version */
  generatedBy?: string;
}

export interface ContextContent {
  /** Personal developer preferences and profile */
  personal?: PersonalContext;
  /** Project-specific configurations */
  project?: ProjectContext;
  /** AI prompt templates and system messages */
  prompts?: PromptsContext;
  /** MCP servers and custom tool configurations */
  tools?: ToolsContext;
  /** IDE-specific settings for each platform */
  ide?: IdeContext;
}

export interface PersonalContext {
  /** Developer profile information */
  profile?: {
    name?: string;
    email?: string;
    experience_years?: number;
    primary_role?: string;
    secondary_roles?: string[];
    domain_knowledge?: string[];
  };
  /** Coding style preferences */
  preferences?: {
    theme?: string;
    fontSize?: number;
    style?: string;
    naming_convention?: string;
    comment_style?: string;
    error_handling?: string;
    testing_approach?: string;
  };
  /** Communication preferences */
  communication?: {
    explanation_level?: string;
    code_review_tone?: string;
    preferred_language?: string;
  };
  /** Technology stack preferences */
  tech_stack?: {
    languages?: string[];
    frameworks?: string[];
    databases?: string[];
    cloud?: string[];
  };
}

export interface ProjectContext {
  /** Basic project information */
  info?: {
    name?: string;
    type?: string;
    domain?: string;
    team_size?: number;
  };
  /** Architecture patterns and decisions */
  architecture?: {
    pattern?: string;
    database_pattern?: string;
    api_style?: string;
    auth_method?: string;
  };
  /** Technology stack for the project */
  tech_stack?: {
    runtime?: string;
    language?: string;
    framework?: string;
    database?: string;
    orm?: string;
    testing?: string[];
    deployment?: string;
  };
  /** Code conventions and standards */
  conventions?: {
    file_naming?: string;
    folder_structure?: string;
    commit_convention?: string;
    branch_strategy?: string;
  };
  /** Project constraints and requirements */
  constraints?: {
    performance_requirements?: string;
    security_level?: string;
    compliance?: string[];
  };
}

export interface PromptsContext {
  /** System prompts for AI interactions */
  system_prompts?: Array<{
    name: string;
    content: string;
    category?: string;
    tags?: string[];
  }>;
  /** Custom prompt templates */
  templates?: Array<{
    name: string;
    template: string;
    variables?: string[];
    description?: string;
  }>;
  /** Conversation starters and examples */
  examples?: Array<{
    name: string;
    prompt: string;
    expected_response?: string;
    use_case?: string;
  }>;
}

export interface ToolsContext {
  /** MCP (Model Context Protocol) server configurations */
  mcp_servers?: Array<{
    name: string;
    command: string;
    args?: string[];
    env?: Record<string, string>;
    description?: string;
  }>;
  /** Custom CLI tools and scripts */
  custom_tools?: Array<{
    name: string;
    command: string;
    description?: string;
    category?: string;
  }>;
  /** External integrations */
  integrations?: Array<{
    name: string;
    type: string;
    config: Record<string, unknown>;
    enabled?: boolean;
  }>;
}

export interface IdeContext {
  /** Claude Code specific settings */
  'claude-code'?: {
    settings?: Record<string, unknown>;
    keybindings?: Record<string, unknown>;
    extensions?: string[];
    mcp_config?: Record<string, unknown>;
    claude_md?: string;
  };
  /** Kiro IDE specific settings */
  'kiro-ide'?: {
    settings?: Record<string, unknown>;
    specs?: Record<string, unknown>;
    steering?: Record<string, unknown>;
    hooks?: Record<string, unknown>;
  };
  /** Cursor IDE specific settings */
  'cursor-ide'?: {
    settings?: Record<string, unknown>;
    keybindings?: Record<string, unknown>;
    extensions?: string[];
  };
  /** Generic IDE settings for other platforms */
  [ideId: string]: Record<string, unknown> | undefined;
}

export interface SecurityInfo {
  /** Whether API keys or secrets were detected */
  hasApiKeys: boolean;
  /** List of field paths that were filtered out */
  filteredFields: string[];
  /** Security scan results */
  scanResults: {
    passed: boolean;
    warnings: string[];
    errors?: string[];
  };
  /** Sensitive patterns that were detected and removed */
  detectedPatterns?: Array<{
    pattern: string;
    field: string;
    action: SecurityAction;
  }>;
}

/**
 * Extended interface for cloud deployment operations
 * Includes additional metadata for Supabase storage and community features
 */
export interface DeployableContext extends TaptikContext {
  cloudMetadata: CloudMetadata;
}

export interface CloudMetadata {
  /** Unique identifier for the cloud configuration */
  configId: string;
  /** Storage path in Supabase bucket */
  storagePath: string;
  /** Public download URL */
  downloadUrl?: string;
  /** Whether configuration is publicly accessible */
  isPublic: boolean;
  /** User ID who uploaded the configuration */
  uploadedBy: string;
  /** Upload timestamp */
  uploadedAt: string;
  /** Download statistics */
  stats?: {
    downloadCount: number;
    likeCount: number;
    viewCount?: number;
  };
  /** Version information for updates */
  versionInfo?: {
    current: string;
    previous?: string;
    changeNotes?: string;
  };
}

/**
 * Response format for cloud search operations
 */
export interface CloudConfigSearchResponse {
  data: CloudConfigItem[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    hasNext: boolean;
    hasPrevious: boolean;
  };
  filters: {
    ide?: string;
    tags?: string[];
    author?: string;
    sortBy?: ConfigSortBy;
    timeRange?: string;
  };
}

export interface CloudConfigItem {
  id: string;
  title: string;
  description?: string;
  author: {
    username: string;
    fullName?: string;
    avatarUrl?: string;
  };
  sourceIde: string;
  targetIdes: string[];
  tags: string[];
  stats: {
    downloadCount: number;
    likeCount: number;
    size: string;
  };
  isPublic: boolean;
  version: string;
  createdAt: string;
  updatedAt?: string;
  downloadUrl: string;
  previewUrl?: string;
}

/**
 * Database schema interfaces for Supabase tables
 */
export interface ConfigPackageRecord {
  id: string;
  user_id: string;
  title: string;
  description?: string;
  source_ide: string;
  target_ides: string[];
  tags: string[];
  is_public: boolean;
  file_path: string;
  file_size?: number;
  download_count: number;
  like_count: number;
  version: string;
  created_at: string;
  updated_at: string;
}

export interface UserProfileRecord {
  id: string;
  username: string;
  full_name?: string;
  avatar_url?: string;
  bio?: string;
  website?: string;
  github_username?: string;
  created_at: string;
  updated_at: string;
}

export interface ConfigLikeRecord {
  id: string;
  user_id: string;
  config_id: string;
  created_at: string;
}

export interface ConfigDownloadRecord {
  id: string;
  user_id?: string;
  config_id: string;
  downloaded_at: string;
}